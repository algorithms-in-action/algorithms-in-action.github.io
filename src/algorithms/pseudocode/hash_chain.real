\Note{  REAL specification for hashing - chaining

Based on open addressing code etc.  Not checked carefully.
We use Empty to denote the Empty list; hopefully not to be confused with
empty table slots in open addressing.
\Note}

\Code{
Insert
HashInsert(T, k)  // Insert key k into table T
    \In{
    Check how full the table is
    \Expl{ This is not really required, but if the number of insertions
      is getting large compared to the table size it may be worth expanding the
      table - see the Background.
    \Expl}
    \Note{ Could include this but best not bother?
      Insertions <- Insertions + 1
    \Note}
    i <- hash(k) \Ref Hash1
    insert k into list T[i] \Ref InsertList
\Code}

Code{
InsertList
    l <- new list node with head k and tail T[i]
    \Expl{ Here we simply insert k at the start of the list T[i]. We
      could check for duplicates but it is not necessary and would require
      scanning the list.
    \Expl}
    T[i] <- l
\Code}

\Code{
Search
HashSearch(T, k)  // Search for key k in table T
\In{
    i <- hash(k) \Ref Hash1
    search for k in list T[i] \Ref SearchList
\In}
\Code}

Code{
SearchList
    l <- T[i]
    while not (l = Empty or head(l) = k) // 'Empty' is the empty list
        \In{
        l <- tail(l)  // skip to next list element
        \In}
    if l = Empty // reached the end of the list without finding k
        \In{
        return NOTFOUND
        \In}
    else
        \In{
        return l // return list element where the key has been found
        \Expl{ Normally there would keys and values stored and we would
          return the value.
        \Expl}
        \In}
\Code}

\Code{
HashDelete(T, k)
    i <- hash(k) \Ref Hash1
    delete k from list T[i] \Ref DeleteList
\Code}

Code{
DeleteList
    l <- T[i]  // l scans through the list T[i]
    prevptr <- pointer to T[i] // follows one step behind l
    \Expl{ prevptr is a pointer to a pointer. It trails one step behind
      l as we scan through the list so the previous node (or T[i]) can
      be modified when k is found.
    \Expl}
    while not (l = Empty or head(l) = k) // 'Empty' is the empty list
        \In{
        l <- tail(l)  // skip to next list element
        prevptr <- pointer to tail(l)
        \In}
    if l = Empty // reached the end of the list without finding k
        \In{
        // do nothing
        \In}
    else
        \In{
        *prevptr <- tail(l) // previous node now points to tail(l)
        \Expl{ The list now skips over the node containing k. The
          memory for this node can be reclaimed.
        \Expl}
        \In}
\Code}

\Note{ This is used for both Insert and Search - the implementation may
need to copy it for animation purposes
\Note}
\Code{
Hash1    
    i <- (k * BIGPRIME) mod TableSize
    \Expl{BIGPRIME much bigger than TableSize (which is also prime).  The object is to spread the values
	across the hash table as widely as possible. 
        Here we use BIGPRIME = 3457.
    \Expl}
\Code}

